{
  "info": {
    "name": "OPR BE API",
    "_postman_id": "8e6b7e1e-7b4a-4a3f-9f2f-7b5c2d1a9a3f",
    "description": "Postman collection for OPR Backend API. Uses {{url}} as the base URL. Login and refresh endpoints automatically store tokens in collection variables, and a collection-level pre-request script injects the Authorization header (Bearer {{accessToken}}) automatically on other requests.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/create_user",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "create_user"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"changeme123\",\n  \"name\": \"Jane Doe\",\n  \"role\": \"user\",\n  \"apps\": \"dashboard,analytics\",\n  \"is_authorized\": true,\n  \"is_active\": true,\n  \"is_admin\": false,\n  \"read_only\": false\n}"
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try {",
                  "  const json = pm.response.json();",
                  "  if (json && json.access_token) {",
                  "    pm.collectionVariables.set('accessToken', json.access_token);",
                  "  }",
                  "  if (json && json.refresh_token) {",
                  "    pm.collectionVariables.set('refreshToken', json.refresh_token);",
                  "  }",
                  "  pm.test('Stored access and refresh tokens', function () {",
                  "    pm.expect(pm.collectionVariables.get('accessToken')).to.be.a('string');",
                  "    pm.expect(pm.collectionVariables.get('refreshToken')).to.be.a('string');",
                  "  });",
                  "} catch (e) {",
                  "  console.warn('Token parsing failed', e);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/login",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"changeme123\"\n}"
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Ensure body has refresh_token from collection variable if not manually set",
                  "if (!pm.request.body || pm.request.body.mode !== 'raw') { return; }",
                  "let body;",
                  "try { body = JSON.parse(pm.request.body.raw || '{}'); } catch(e) { body = {}; }",
                  "if (!body.refresh_token) {",
                  "  const rt = pm.collectionVariables.get('refreshToken');",
                  "  if (rt) { body.refresh_token = rt; }",
                  "}",
                  "pm.request.body.update(JSON.stringify(body, null, 2));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try {",
                  "  const json = pm.response.json();",
                  "  if (json && json.access_token) { pm.collectionVariables.set('accessToken', json.access_token); }",
                  "  if (json && json.refresh_token) { pm.collectionVariables.set('refreshToken', json.refresh_token); }",
                  "  pm.test('Refreshed tokens stored', function () {",
                  "    pm.expect(pm.collectionVariables.get('accessToken')).to.be.a('string');",
                  "    pm.expect(pm.collectionVariables.get('refreshToken')).to.be.a('string');",
                  "  });",
                  "} catch (e) { console.warn('Token parsing failed', e); }"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/refresh_token",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "refresh_token"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refreshToken}}\"\n}"
            }
          }
        },
        {
          "name": "Request Password Reset",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/request_password_reset",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "request_password_reset"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            }
          }
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/reset_password",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "reset_password"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-from-email\",\n  \"new_password\": \"NewPass123!\"\n}"
            }
          }
        },
        {
          "name": "Update User (self)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/update_user",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "update_user"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"updates\": {\n    \"name\": \"Jane D.\",\n    \"password\": \"newpass123\",\n    \"role\": \"user\",\n    \"apps\": \"dashboard,analytics\",\n    \"is_authorized\": true,\n    \"is_active\": true,\n    \"is_admin\": false,\n    \"read_only\": false\n  }\n}"
            }
          }
        },
        {
          "name": "Delete User (self)",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/authentication/delete_user",
              "host": ["{{url}}"],
              "path": ["v1", "authentication", "delete_user"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": null,\n  \"password\": null\n}"
            }
          }
        }
      ]
    },
    {
      "name": "Admin",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/v1/admin/users",
              "host": ["{{url}}"],
              "path": ["v1", "admin", "users"]
            }
          }
        },
        {
          "name": "Get User by Email",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/v1/admin/users/{{adminEmail}}",
              "host": ["{{url}}"],
              "path": ["v1", "admin", "users", "{{adminEmail}}"]
            }
          }
        },
        {
          "name": "Update User (admin)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{url}}/v1/admin/users/{{adminEmail}}",
              "host": ["{{url}}"],
              "path": ["v1", "admin", "users", "{{adminEmail}}"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"newpass123\",\n  \"name\": \"John Admin\",\n  \"role\": \"manager\",\n  \"apps\": \"dashboard,analytics\",\n  \"is_authorized\": true,\n  \"is_active\": true,\n  \"is_admin\": true,\n  \"read_only\": false,\n  \"new_email\": null,\n  \"add_apps\": [\"reports\"],\n  \"remove_apps\": [\"deprecated\"]\n}"
            }
          }
        },
        {
          "name": "Delete User (admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{url}}/v1/admin/users/{{adminEmail}}",
              "host": ["{{url}}"],
              "path": ["v1", "admin", "users", "{{adminEmail}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Farm",
      "item": [
        {
          "name": "Create Farm",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try { const json = pm.response.json(); if (json && json.id) { pm.collectionVariables.set('farmId', json.id); } } catch(e) {}",
                  "pm.test('Stored farmId', function () { pm.expect(pm.collectionVariables.get('farmId')).to.be.a('string'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/farm/", "host": ["{{url}}"], "path": ["v1", "farm", ""] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Sample Farm\",\n  \"country\": \"Brazil\",\n  \"state_province\": \"SP\",\n  \"notes\": \"Demo farm created via Postman\",\n  \"lat_long\": { \"type\": \"Point\", \"coordinates\": [-48, -21] }\n}"
            }
          }
        },
        {
          "name": "List Farms",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/farm/", "host": ["{{url}}"], "path": ["v1", "farm", ""] } }
        },
        {
          "name": "Get Farm by ID",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/farm/{{farmId}}", "host": ["{{url}}"], "path": ["v1", "farm", "{{farmId}}"] } }
        },
        {
          "name": "Update Farm",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/farm/{{farmId}}", "host": ["{{url}}"], "path": ["v1", "farm", "{{farmId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"notes\": \"Updated notes\"\n}" }
          }
        },
        {
          "name": "Delete Farm",
          "request": { "method": "DELETE", "header": [], "url": { "raw": "{{url}}/v1/farm/{{farmId}}", "host": ["{{url}}"], "path": ["v1", "farm", "{{farmId}}"] } }
        },
        {
          "name": "Share Farm",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/farm/{{farmId}}/share", "host": ["{{url}}"], "path": ["v1", "farm", "{{farmId}}", "share"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"add\": [\"friend1@example.com\", \"friend2@example.com\"],\n  \"remove\": [\"old@example.com\"]\n}"
            }
          }
        }
      ]
    },
    {
      "name": "Feed Dry Matter",
      "item": [
        {
          "name": "Create Feed Dry Matter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try { const json = pm.response.json(); if (json && json.id) { pm.collectionVariables.set('feedId', json.id); } } catch(e) {}",
                  "pm.test('Stored feedId', function () { pm.expect(pm.collectionVariables.get('feedId')).to.be.a('string'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/feed-dry-matter/", "host": ["{{url}}"], "path": ["v1", "feed-dry-matter", ""] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2024-01-19\",\n  \"unit\": \"CAUA\",\n  \"farm_id\": \"{{farmId}}\",\n  \"adaptation\": 61,\n  \"growth\": 60,\n  \"termination\": 60,\n  \"sugarcane_bagasse\": 37,\n  \"wet_grain\": 58,\n  \"silage\": 0\n}"
            }
          }
        },
        {
          "name": "List Feed Dry Matter (by farm)",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/feed-dry-matter?farm_id={{farmId}}", "host": ["{{url}}"], "path": ["v1", "feed-dry-matter"], "query": [ { "key": "farm_id", "value": "{{farmId}}" } ] } }
        },
        {
          "name": "Get Feed Dry Matter by ID",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/feed-dry-matter/{{feedId}}", "host": ["{{url}}"], "path": ["v1", "feed-dry-matter", "{{feedId}}"] } }
        },
        {
          "name": "Update Feed Dry Matter",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/feed-dry-matter/{{feedId}}", "host": ["{{url}}"], "path": ["v1", "feed-dry-matter", "{{feedId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"adaptation\": 62\n}" }
          }
        },
        {
          "name": "Delete Feed Dry Matter",
          "request": { "method": "DELETE", "header": [], "url": { "raw": "{{url}}/v1/feed-dry-matter/{{feedId}}", "host": ["{{url}}"], "path": ["v1", "feed-dry-matter", "{{feedId}}"] } }
        }
      ]
    },
    {
      "name": "Manure Score",
      "item": [
        {
          "name": "Create Manure Score",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try { const json = pm.response.json(); if (json && json.id) { pm.collectionVariables.set('manureId', json.id); } } catch(e) {}",
                  "pm.test('Stored manureId', function () { pm.expect(pm.collectionVariables.get('manureId')).to.be.a('string'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/manure-score/", "host": ["{{url}}"], "path": ["v1", "manure-score", ""] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2024-08-11\",\n  \"unit\": \"CAUA\",\n  \"farm_id\": \"{{farmId}}\",\n  \"diet\": \"ADAPTATION\",\n  \"score_1\": 1,\n  \"score_2\": 4,\n  \"score_3\": 6,\n  \"score_3_5\": 2,\n  \"score_4\": 0\n}"
            }
          }
        },
        {
          "name": "List Manure Scores (by farm)",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/manure-score?farm_id={{farmId}}", "host": ["{{url}}"], "path": ["v1", "manure-score"], "query": [ { "key": "farm_id", "value": "{{farmId}}" } ] } }
        },
        {
          "name": "Get Manure Score by ID",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/manure-score/{{manureId}}", "host": ["{{url}}"], "path": ["v1", "manure-score", "{{manureId}}"] } }
        },
        {
          "name": "Update Manure Score",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/manure-score/{{manureId}}", "host": ["{{url}}"], "path": ["v1", "manure-score", "{{manureId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"score_3\": 7\n}" }
          }
        },
        {
          "name": "Delete Manure Score",
          "request": { "method": "DELETE", "header": [], "url": { "raw": "{{url}}/v1/manure-score/{{manureId}}", "host": ["{{url}}"], "path": ["v1", "manure-score", "{{manureId}}"] } }
        }
      ]
    },
    {
      "name": "Diet Cost",
      "item": [
        {
          "name": "Create Diet Cost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try { const json = pm.response.json(); if (json && json.id) { pm.collectionVariables.set('dietCostId', json.id); } } catch(e) {}",
                  "pm.test('Stored dietCostId', function () { pm.expect(pm.collectionVariables.get('dietCostId')).to.be.a('string'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/diet-cost/", "host": ["{{url}}"], "path": ["v1", "diet-cost", ""] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2024-08-11\",\n  \"unit\": \"CAUA\",\n  \"farm_id\": \"{{farmId}}\",\n  \"diet\": \"ADAPTATION\",\n  \"cost_mn_per_ton\": 620,\n  \"cost_ms_per_ton\": 1089,\n  \"time_in_diet_days\": 16,\n  \"cost_mn_per_phase\": 9920,\n  \"cost_ms_per_phase\": 17424\n}"
            }
          }
        },
        {
          "name": "List Diet Cost (by farm)",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/diet-cost?farm_id={{farmId}}", "host": ["{{url}}"], "path": ["v1", "diet-cost"], "query": [ { "key": "farm_id", "value": "{{farmId}}" } ] } }
        },
        {
          "name": "Get Diet Cost by ID",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/diet-cost/{{dietCostId}}", "host": ["{{url}}"], "path": ["v1", "diet-cost", "{{dietCostId}}"] } }
        },
        {
          "name": "Update Diet Cost",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/diet-cost/{{dietCostId}}", "host": ["{{url}}"], "path": ["v1", "diet-cost", "{{dietCostId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"cost_mn_per_ton\": 625\n}" }
          }
        },
        {
          "name": "Delete Diet Cost",
          "request": { "method": "DELETE", "header": [], "url": { "raw": "{{url}}/v1/diet-cost/{{dietCostId}}", "host": ["{{url}}"], "path": ["v1", "diet-cost", "{{dietCostId}}"] } }
        }
      ]
    },
    {
      "name": "Penn State",
      "item": [
        {
          "name": "Create Penn State",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try { const json = pm.response.json(); if (json && json.id) { pm.collectionVariables.set('pennStateId', json.id); } } catch(e) {}",
                  "pm.test('Stored pennStateId', function () { pm.expect(pm.collectionVariables.get('pennStateId')).to.be.a('string'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/penn-state/", "host": ["{{url}}"], "path": ["v1", "penn-state", ""] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"2024-08-11\",\n  \"unit\": \"CAUA\",\n  \"farm_id\": \"{{farmId}}\",\n  \"diet\": \"ADAPTATION\",\n  \"pct_19mm\": 10.5,\n  \"pct_8mm\": 30.0,\n  \"pct_3_8mm\": 45.0,\n  \"pct_fines\": 14.5\n}"
            }
          }
        },
        {
          "name": "List Penn State (by farm)",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/penn-state?farm_id={{farmId}}", "host": ["{{url}}"], "path": ["v1", "penn-state"], "query": [ { "key": "farm_id", "value": "{{farmId}}" } ] } }
        },
        {
          "name": "Get Penn State by ID",
          "request": { "method": "GET", "header": [], "url": { "raw": "{{url}}/v1/penn-state/{{pennStateId}}", "host": ["{{url}}"], "path": ["v1", "penn-state", "{{pennStateId}}"] } }
        },
        {
          "name": "Update Penn State",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{url}}/v1/penn-state/{{pennStateId}}", "host": ["{{url}}"], "path": ["v1", "penn-state", "{{pennStateId}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"pct_8mm\": 32.5\n}" }
          }
        },
        {
          "name": "Delete Penn State",
          "request": { "method": "DELETE", "header": [], "url": { "raw": "{{url}}/v1/penn-state/{{pennStateId}}", "host": ["{{url}}"], "path": ["v1", "penn-state", "{{pennStateId}}"] } }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Inject Authorization header for all requests except login and refresh_token",
          "const path = pm.request.url.getPath();",
          "const skipAuth = path.endsWith('/authentication/login') || path.endsWith('/authentication/refresh_token');",
          "if (!skipAuth) {",
          "  const token = pm.collectionVariables.get('accessToken');",
          "  if (token) {",
          "    pm.request.headers.upsert({ key: 'Authorization', value: `Bearer ${token}` });",
          "  }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    { "key": "url", "value": "http://localhost:8000" },
    { "key": "accessToken", "value": "" },
    { "key": "refreshToken", "value": "" },
    { "key": "adminEmail", "value": "user@example.com" }
  ]
}
